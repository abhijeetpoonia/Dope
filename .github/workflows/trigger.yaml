name: Multi-Repo Terraform Workflow

on:
  workflow_dispatch:
    inputs:
      terraform_action:
        description: "Terraform action to perform"
        required: true
        default: "plan"
        type: choice
        options:
          - plan
          - apply
      repositories:
        description: "Repositories to process (comma-separated)"
        required: true
        default: "asg-1,ec2"
        type: string
  repository_dispatch:
    types: [terraform-trigger, pr-trigger]

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # This ensures we only process the repository that triggered the workflow
        repo: ${{ fromJson(format('["%s"]', github.event.client_payload.repository || github.event.inputs.repositories)) }}
    steps:
      - name: Check Repository
        id: check_repo
        run: |
          echo "Processing repository: ${{ matrix.repo }}"
          echo "should_process=true" >> $GITHUB_OUTPUT
        shell: bash

      - name: Remove Default Repo
        if: steps.check_repo.outputs.should_process == 'true'
        run: rm -rf ${{ github.workspace }}/*

      - name: Checkout Target Repository
        if: steps.check_repo.outputs.should_process == 'true'
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/${{ matrix.repo }}
          ref: ${{ github.event.client_payload.ref || 'prod' }}
          path: ${{ matrix.repo }}

      - name: Setup Terraform
        if: steps.check_repo.outputs.should_process == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.0"

      - name: Configure AWS Credentials
        if: steps.check_repo.outputs.should_process == 'true'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Terraform Init
        if: steps.check_repo.outputs.should_process == 'true'
        id: init
        working-directory: ${{ matrix.repo }}/enviroments/prod
        run: |
          terraform init \
            -backend-config="bucket=asgbucket121" \
            -backend-config="key=asg/${{ matrix.repo }}/terraform.tfstate" \
            -backend-config="region=ap-south-1" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        if: steps.check_repo.outputs.should_process == 'true'
        id: validate
        working-directory: ${{ matrix.repo }}/enviroments/prod
        run: terraform validate -no-color

      - name: Terraform Plan
        if: |
          steps.check_repo.outputs.should_process == 'true' && 
          (github.event.client_payload.action == 'plan' || github.event.inputs.terraform_action == 'plan')
        id: plan
        working-directory: ${{ matrix.repo }}/enviroments/prod
        run: terraform plan -no-color -out=tfplan

      - name: Update Pull Request
        if: |
          steps.check_repo.outputs.should_process == 'true' && 
          github.event.client_payload.pr_number != '' &&
          github.event.client_payload.action == 'plan'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const output = `#### Terraform Plan Results for \`${{ matrix.repo }}\`
            #### Terraform Initialization âœ…
            #### Terraform Validation âœ…
            #### Terraform Plan ðŸ“–

            <details><summary>Show Plan</summary>

            \`\`\`terraform\n
            ${process.env.PLAN_OUTPUT}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: '${{ github.event.client_payload.repository }}',
              issue_number: ${{ github.event.client_payload.pr_number }},
              body: output
            })
        env:
          PLAN_OUTPUT: ${{ steps.plan.outputs.stdout }}

      - name: Terraform Apply
        if: |
          steps.check_repo.outputs.should_process == 'true' && 
          ((github.event.client_payload.action == 'apply' && github.event.client_payload.pr_merged == true) ||
           github.event.inputs.terraform_action == 'apply')
        working-directory: ${{ matrix.repo }}/enviroments/prod
        run: terraform apply -auto-approve tfplan
